# ----------------------------------------------------------------------------------------
# fiber (header only)
# Copyright (C) 2022-23 Fix8 Market Technologies Pty Ltd
#   by David L. Dight
# see https://github.com/fix8mt/fiber
#
# Lightweight header-only stackful per-thread fiber
#		with built-in roundrobin scheduler x86_64 / linux only
#
# Distributed under the Boost Software License, Version 1.0 August 17th, 2003
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
# CXX="clang++ -ggdb" CC="clang -ggdb" cmake  ..
# CXX="g++ -ggdb" CC="gcc -ggdb" cmake  ..
# ----------------------------------------------------------------------------------------
cmake_minimum_required (VERSION 3.8)
enable_language(CXX)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)
project (f8fiber VERSION 2.0)

include_directories(${CMAKE_SOURCE_DIR}/include)
set(exdir ${CMAKE_SOURCE_DIR}/examples)
file(GLOB esrc CONFIGURE_DEPENDS "${exdir}/fiber*.cpp")
foreach(x ${esrc})
	get_filename_component(fn ${x} NAME_WLE)
	add_executable(${fn} ${x})
endforeach()

# to disable building monitor tests:
# cmake -DBUILD_MONITOR=false ..
option(BUILD_MONITOR "enable building monitor tests" true)
if(BUILD_MONITOR)
	include(ExternalProject)
	ExternalProject_Add(termbox2
		GIT_REPOSITORY https://github.com/termbox/termbox2.git
		GIT_PROGRESS true
		GIT_TAG master
		UPDATE_DISCONNECTED true
		CONFIGURE_COMMAND ""
		BUILD_IN_SOURCE true
		BUILD_COMMAND sh -c "make -j4"
		INSTALL_COMMAND ""
	)
	set(termbox2 ${CMAKE_CURRENT_BINARY_DIR}/termbox2-prefix/src/termbox2)

	ExternalProject_Add(gmp
		GIT_REPOSITORY https://github.com/alisw/GMP.git
		GIT_PROGRESS true
		GIT_TAG master
		UPDATE_DISCONNECTED true
		CONFIGURE_COMMAND sh -c "./configure --enable-cxx -enable-alloca=alloca"
		BUILD_IN_SOURCE true
		BUILD_COMMAND sh -c "make -j4"
		INSTALL_COMMAND ""
		TEST_COMMAND sh -c "make -j4 check"
	)
	set(gmp ${CMAKE_CURRENT_BINARY_DIR}/gmp-prefix/src/gmp)

	file(GLOB msrc CONFIGURE_DEPENDS "${exdir}/montest*.cpp")
	foreach(x ${msrc})
		get_filename_component(fn ${x} NAME_WLE)
		add_executable(${fn} ${x})
		add_dependencies(${fn} termbox2 gmp)
		target_include_directories(${fn} PRIVATE ${termbox2} ${gmp})
		target_link_directories(${fn} PRIVATE ${termbox2} ${gmp}/.libs)
		target_link_libraries(${fn} PRIVATE termbox.a gmpxx.a gmp.a)
	endforeach()
endif()

