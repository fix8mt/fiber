//-----------------------------------------------------------------------------------------
// fiber (header only)
// Copyright (C) 2022-23 Fix8 Market Technologies Pty Ltd
//   by David L. Dight
// see https://github.com/fix8mt/fiber
//
// Lightweight header-only stackful per-thread fiber
//		with built-in roundrobin scheduler x86_64 / linux only
//
// Distributed under the Boost Software License, Version 1.0 August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------------------
#include <iostream>
#include <functional>
#include <cctype>
#ifdef _GNU_SOURCE
#include <getopt.h>
#endif
#include <fix8/fiber.hpp>

//-----------------------------------------------------------------------------------------
using namespace FIX8;
using namespace std::literals;

//-----------------------------------------------------------------------------------------
class foo
{
	bool tests[9]{};
	void set(int n) { tests[n - 1] = true; }

   static constexpr const std::array long_options
   {
		option{ "scenarioA",	no_argument, 0, 'A' },
		option{ "scenarioB",	no_argument, 0, 'B' },
		option{ "scenarioC",	no_argument, 0, 'C' },
		option{ "scenarioD",	no_argument, 0, 'D' },
		option{ "scenarioE",	no_argument, 0, 'E' },
      option{ "test1",		no_argument, 0, '1' },
      option{ "test2",		no_argument, 0, '2' },
      option{ "test3",		no_argument, 0, '3' },
		option{ "test4",		no_argument, 0, '4' },
		option{ "test5",		no_argument, 0, '5' },
		option{ "test6",		no_argument, 0, '6' },
		option{ "test7",		no_argument, 0, '7' },
		option{ "test8", 		no_argument, 0, '8' },
		option{ "test9", 		no_argument, 0, '9' },
      option{ "help",		no_argument, 0, 'h' },
      option{}
   };

	static const char *get_optstr()
	{
		static const std::string _optstr([]()
		{
			std::ostringstream ostr;
			for (const auto& pp : long_options)
				ostr << static_cast<char>(pp.val);
			return ostr.str();
		}());
		return _optstr.c_str();
	}
	static std::string_view get_helpstr()
	{
		static const std::string _helpstr([]()
		{
			std::ostringstream ostr;
			for (const auto& pp : long_options)
				ostr << "   -" << static_cast<char>(pp.val) << ",--" << pp.name << '\n';
			return ostr.str();
		}());
		return _helpstr;
	}

public:
	foo(int argc, char *argv[])
	{
		for (int val; (val = getopt_long (argc, argv, get_optstr(), long_options.data(), 0)) != -1; )
		{
			if (std::isdigit(val))
				set(val - '0');
			else switch(val)
			{
			case 'A':
				set(1); set(2); set(5);
				break;
			case 'B':
				set(1); set(2); set(6);
				break;
			case 'C':
				set(1); set(2); set(7);
				break;
			case 'E':
				set(3);
				[[fallthrough]];
			case 'D':
				set(1); set(2); set(4); set(5);
				break;
			case 'h':
				std::cout << "Usage: " << argv[0] << " -[" << get_optstr() << "]\n" << get_helpstr();
				[[fallthrough]];
			case '?':
			case ':':
				exit(1);
			default:
				break;
			}
		}
	}

	bool test(int n) const { return tests[n - 1]; }

	void doit()
	{
		std::cout << "\tstarting " << this_fiber::name() << '\n';
		this_fiber::yield();
		for(int ii{}; ii < 10; std::this_thread::sleep_for(100ms))
		{
			if (test(9) && ii > 4)
				throw 64;
			std::cout << '\t' << this_fiber::name() << ": " << ++ii << '\n';
		}
		std::cout << "\tleaving " << this_fiber::name() << '\n';
		if (test(3))
			throw 42;
	}

	friend std::ostream& operator<<(std::ostream& os, const foo& what)
	{
		for (int ii{}; auto pp : what.tests)
			std::cout << ++ii << ':' << std::boolalpha << pp << ' ';
		return os;
	}
};

//-----------------------------------------------------------------------------------------
int main(int argc, char *argv[])
{
	foo bar(argc, argv);
	std::cout << bar << std::endl;

	if (bar.test(1))
		fibers::set_flag(global_fiber_flags::excepthandling);
	if (bar.test(2))
		fibers::set_flag(global_fiber_flags::termthrow);
	if (bar.test(5))
		fiber{{"f1"}, &foo::doit, &bar};
	if (bar.test(6))
		fiber({"f1"}, &foo::doit, &bar).detach();
	fiber_ptr fb;
	if (bar.test(7))
		fb = make_fiber({"f1"}, &foo::doit, &bar);
	if (bar.test(4))
		fibers::wait_all();
	try
	{
		if (fibers::get_exception_ptr())
			std::rethrow_exception(fibers::get_exception_ptr());
	}
	catch(const std::exception& e)
	{
		std::cerr << "rethrown: " << e.what() << '\n';
	}
	catch(const int& e)
	{
		std::cerr << "rethrown: " << e << '\n';
	}
	catch(...)
	{
		std::cerr << "unknown exception\n";
	}

	if (bar.test(8)) try
	{
		fiber fb({"f2"}, &foo::doit, &bar);
		this_fiber::yield();
		fb.join();
		this_fiber::yield();
		fb.join();
	}
	catch(const std::exception& e)
	{
		std::cerr << "exception: " << e.what() << '\n';
	}
	catch(...)
	{
		std::cerr << "unknown exception\n";
	}
	std::cout << "exiting main\n";
	return 0;
}
