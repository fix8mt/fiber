//-----------------------------------------------------------------------------------------
// fiber (header only)
// Copyright (C) 2022-23 Fix8 Market Technologies Pty Ltd
//   by David L. Dight
// see https://github.com/fix8mt/fiber
//
// Lightweight header-only stackful per-thread fiber
//		with built-in roundrobin scheduler x86_64 / linux only
//
// Distributed under the Boost Software License, Version 1.0 August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------------------
#include <queue>
#include <random>
#include <fix8/fiber.hpp>

//-----------------------------------------------------------------------------------------
using namespace FIX8;

//-----------------------------------------------------------------------------------------
using uint128_t = __uint128_t;

std::ostream& operator<<(std::ostream& os, const uint128_t val) noexcept
{
	if (std::ostream::sentry sent(os); sent)
	{
		uint128_t tmp { val < 0 ? -val : val };
		std::array<char, 128> buffer;
		auto blen { std::end(buffer) };
		do
		{
			static constexpr const std::string_view vnum {"0123456789"};
			*--blen = vnum[tmp % 10];
			tmp /= 10;
		}
		while (tmp);
		if (val < 0)
			*--blen = '-';
		if (auto len { std::end(buffer) - blen }; os.rdbuf()->sputn(blen, len) != len)
			os.setstate(std::ios_base::badbit);
	}
	return os;
}

//-----------------------------------------------------------------------------------------
template<typename T>
class foo
{
	std::queue<T> _queue;
   fiber _produce, _consume;

   void producer(int numtogen)
   {
		std::cout << "\tproducer:entry (id:" << this_fiber::get_id() << ")\n";
		std::mt19937_64 rnde {std::random_device{}()};
		auto dist{std::uniform_int_distribution<T>(1, std::numeric_limits<T>().max())};
      for (; numtogen; --numtogen)
      {
			int cnt{};
			while(_queue.size() < 5)
			{
				_queue.push(dist(rnde));
				++cnt;
			}
			std::cout << "\tproduced: " << cnt << '\n';
			_consume.resume(); // switch to consumer
      }
		_consume.schedule(); // consumer is next fiber to run
      std::cout << "\tproducer:exit\n";
   }
   void consumer()
   {
		std::cout << "\tconsumer:entry (id:" << this_fiber::get_id() << ")\n";
      while (_produce)
      {
			int cnt{};
			while(!_queue.empty())
			{
				std::cout << "\t\t" << ++cnt << ": " << _queue.front() << '\n';
				_queue.pop();
			}
			std::cout << "\tconsumed: " << cnt << '\n';
			_produce.resume(); // switch to producer
      }
      std::cout << "\tconsumer:exit\n";
   }

public:
   foo(int num) : _produce(&foo::producer, this, num), _consume(&foo::consumer, this)
	{
		_produce.resume(); // switch to producer
	}
};

//-----------------------------------------------------------------------------------------
int main(int argc, char *argv[])
{
   std::cout << "main:entry\n";
	try
	{
		foo<uint128_t>(argc > 1 ? std::stoi(argv[1]) : 10);
	}
	catch (const std::exception& e)
	{
		std::cerr << "exception: " << e.what() << std::endl;
	}
   std::cout << "main:exit\n";
   return 0;
}
