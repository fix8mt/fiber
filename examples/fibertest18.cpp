//-----------------------------------------------------------------------------------------
// fiber (header only)
// Copyright (C) 2022-23 Fix8 Market Technologies Pty Ltd
//   by David L. Dight
// see https://github.com/fix8mt/fiber
//
// Lightweight header-only stackful per-thread fiber
//		with built-in roundrobin scheduler x86_64 / linux only
//
// Distributed under the Boost Software License, Version 1.0 August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------------------
#include <iostream>
#include <future>
#include <random>
#include <list>
#include <string>
#include <fix8/fiber.hpp>

//-----------------------------------------------------------------------------------------
using namespace FIX8;
using namespace std::literals;

//-----------------------------------------------------------------------------------------
int main(void)
{
	static std::mt19937_64 rnde {std::random_device{}()}; // this one needs to be static
	std::cout << "Starting main\n";
	std::list<std::future<int>> flist;

	std::thread ([&flist]()
	{
		for (int ii{1}; ii <= 5; ++ii)
		{
			std::packaged_task task([](int arg)
			{
				std::cout << "\tStarting " << this_fiber::name(std::string(this_fiber::name() + std::to_string(arg)).c_str()) << '\n';
				int result{};
				for (int ii{}; ii < arg; this_fiber::yield())
				{
					result += std::uniform_int_distribution<int>{1, 1000000}(rnde);
					std::cout << "\t\t" << this_fiber::name() << ": " << ++ii << ' ' << result << '\n';
				}
				std::cout << "\tLeaving " << this_fiber::name() << '\n';
				return result;
			});
			flist.emplace_back(task.get_future());
			fiber({.launch_order=ii,.name="sub"}, std::move(task), ii).detach();
		}
	}).join();

	int result{}, kk{};
	for (auto& pp : flist)
	{
		auto val { pp.get() };
		result += val;
		std::cout << "got " << ++kk << " (" << val << ")\n";
	}
	std::cout << "result = " << result << '\n';
	std::cout << "Exiting main\n";
	return 0;
}
