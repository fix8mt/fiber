//-----------------------------------------------------------------------------------------
// fiber (header only)
// Copyright (C) 2022-23 Fix8 Market Technologies Pty Ltd
//   by David L. Dight
// see https://github.com/fix8mt/fiber
//
// Lightweight header-only stackful per-thread fiber
//		with built-in roundrobin scheduler x86_64 / linux only
//
// Distributed under the Boost Software License, Version 1.0 August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// Monitor test using:
//
// GNU multiple precision arithmetic library, version 6.2.1.
// 	Copyright 1991, 1993-2016, 2018-2020 Free Software Foundation, Inc.
// Termbox2
//		MIT License
// 	Copyright (c) 2010-2020 nsf <no.smile.face@gmail.com>
//		              2015-2022 Adam Saponara <as@php.net>
//----------------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <chrono>
#include <thread>
#include <random>
#include <fix8/fiber.hpp>
#include <fix8/fibermonitor.hpp>
#include <getopt.h>
#include <gmpxx.h>

//-----------------------------------------------------------------------------------------
using namespace FIX8;
using namespace std::literals;

//-----------------------------------------------------------------------------------------
class foo : public fiber_monitor
{
	std::mt19937_64 _rnde {std::random_device{}()};
	std::uniform_int_distribution<long> _exp;
	bool _todisk, _percent;

public:
	foo(int interval, long maxexp, bool todisk, bool percent) :
		fiber_monitor(std::chrono::milliseconds(interval), fiber_monitor::sort_mode::by_ms),
		_exp{1, maxexp}, _todisk(todisk), _percent(percent) {}

	void func(int arg)
	{
		std::unique_ptr<std::ofstream> dskfile { _todisk ? std::make_unique<std::ofstream>(
			std::string { "worker"s + std::to_string(arg - 10) + ".out" }.c_str(), std::ios::trunc) : nullptr };
		mpz_class result;
		for (int ii{}; ii < arg; ++ii)
		{
			auto expv { _exp(_rnde) }; // obtain our exponent
			std::ostringstream expstr;
			if (_percent)
				expstr << ii << '/' << arg << " (" << (ii * 100 / arg) << "%)";
			else
				expstr << "2^" << expv;
			this_fiber::name(expstr.str().c_str());
			update();
			mpz_class pr;
			mpz_ui_pow_ui(pr.get_mpz_t(), 2, expv); // raise 2^expv
			is_quit() ? this_fiber::resume_main() : this_fiber::yield(); // user pressed 'x'?, yield mid processing
			result += pr; // add to total
			if (dskfile)
				*dskfile << expstr.str() << " = " << pr << '\n';
			update();
			is_quit() ? this_fiber::resume_main() : this_fiber::yield(); // user pressed 'x'?. or yield
		}
		if (dskfile)
			*dskfile << "result = " << result << '\n';
		this_fiber::name("finished");
	}
	bool user_key_process(char ch) noexcept override
	{
		return ch == 'q';
	}
};

//-----------------------------------------------------------------------------------------
int main(int argc, char *argv[])
{
	constexpr long maxexp_default{3999999999L};
	constexpr int fcnt_default{20};
	long maxexp{maxexp_default};
	int interval{}, fcnt{fcnt_default}, val;
	bool todisk{}, threaded{}, retain{true}, percent{};

	static constexpr const char *optstr{"f:i:hm:wrp"};
#ifdef _GNU_SOURCE
   static constexpr const std::array<option, 7> long_options
	{{
		{ "help",		no_argument,			nullptr, 'h' },
		{ "write",		no_argument,			nullptr, 'w' },
		{ "percent",	no_argument,			nullptr, 'p' },
		{ "fibers",		required_argument,	nullptr, 'f' },
		{ "maxexp",		required_argument,	nullptr, 'm' },
		{ "interval",	required_argument,	nullptr, 'i' },
	}};

	while ((val = getopt_long (argc, argv, optstr, long_options.data(), 0)) != -1)
#else
	while ((val = getopt (argc, argv, optstr)) != -1)
#endif
	{
		try
		{
			switch (val)
			{
			case ':': case '?':
				std::cout << '\n';
				[[fallthrough]];
			case 'h':
				std::cout << "Usage: " << argv[0] << " [-" << optstr << "]" << R"(
  -w write results to disk files (default )" << std::boolalpha << todisk << R"()
  -i interval msecs (default )" << interval << R"()
  -r retain finished fibers (default )" << std::boolalpha << retain << R"()
  -p show percent remaining work (default )" << std::boolalpha << percent << R"()
  -f fiber count (default )" << fcnt_default << R"()
  -m max exponent (default )" << maxexp_default << R"()
  -h help)" << std::endl;
			  return 0;
			case 'w': todisk ^= true; break;
			case 'p': percent ^= true; break;
			case 'r': retain ^= true; break;
			case 'm': maxexp = std::stol(optarg); break;
			case 'f': fcnt = std::stoi(optarg); break;
			case 'i': interval = std::stoi(optarg); break;
			default: break;
			}
		}
		catch (const std::exception& e)
		{
			std::cerr << optarg << ": error: invalid value for switch \'"
				<< static_cast<char>(val) << "\' (" << e.what() << ')' << std::endl;
			return 1;
		}
	}

	if (todisk && maxexp == maxexp_default)
		maxexp = 10000000L;
	if (retain)
		fibers::set_flag(global_fiber_flags::retain);

	foo bar(interval, maxexp, todisk, percent);
	std::vector<fiber_ptr> fbs;
	for (int ii{}; ii < fcnt; ++ii)
		fbs.emplace_back(make_fiber({.launch_order=ii}, &foo::func, &bar, ii + 10));

	fibers::wait_all([&bar]()
	{
		if (!bar)
			fibers::kill_all();
		return !bar;
	});
	bar.update();
	std::this_thread::sleep_for(2s);
	return 0;
}
