//-----------------------------------------------------------------------------------------
// fiber (header only)
// Copyright (C) 2022 Fix8 Market Technologies Pty Ltd
//   by David L. Dight
// see https://github.com/fix8mt/f8fiber
//
// Lightweight header-only stackful per-thread fiber
//		with built-in roundrobin scheduler x86_64 / linux only
//
// Distributed under the Boost Software License, Version 1.0 August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//----------------------------------------------------------------------------------------
#ifndef FIX8_FIBER_HPP_
#define FIX8_FIBER_HPP_

//----------------------------------------------------------------------------------------
#if !defined(__linux__) || !defined(__x86_64__)
#error "this fiber implementation only runs on x86_64/Linux"
#endif

//----------------------------------------------------------------------------------------
#include <iostream>
#include <iomanip>
#include <type_traits>
#include <future>
#include <deque>
#include <chrono>
#include <algorithm>
#include <cstring>
#include <functional>
#include <stdexcept>
#include <bitset>
#include <mutex>
#include <utility>
#include <condition_variable>
#include <set>
#include <fcntl.h>
#include <sys/resource.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <unistd.h>
#include <pthread.h>

//-----------------------------------------------------------------------------------------
#if !defined SIGSTKSZ
# define SIGSTKSZ 131072 // 128kb recommended
#endif
#if !defined FIBERNAMELEN
# define FIBERNAMELEN 16 // including null terminator
#endif

// if not defined, all instrumentation and printing is enabled (default)
#if !defined FIBER_NO_INSTRUMENTATION
#define FIX8_FIBER_INSTRUMENTATION_
#endif

//-----------------------------------------------------------------------------------------
namespace FIX8 {

//-----------------------------------------------------------------------------------------
#if !defined f8_nonconstructible
/// simple non-constructable base
class f8_nonconstructible
{
protected:
	f8_nonconstructible() = delete;
	~f8_nonconstructible() = delete;
};
#endif

//-----------------------------------------------------------------------------------------
/// unique fiber id
class fiber_id
{
	const void *_ptr{ nullptr };

public:
	fiber_id() = default;
	explicit fiber_id(const void *ptr) noexcept : _ptr{ ptr } {}

#if __cplusplus >= 202002L
	constexpr auto operator<=>(const fiber_id& other) const noexcept { return _ptr <=> other._ptr; }
#else
	constexpr bool operator==(const fiber_id& other) const noexcept { return _ptr == other._ptr; }
	constexpr bool operator!=(const fiber_id& other) const noexcept { return _ptr != other._ptr; }
	constexpr bool operator<(const fiber_id& other) const noexcept { return _ptr < other._ptr; }
	constexpr bool operator>(const fiber_id& other) const noexcept { return other._ptr < _ptr; }
	constexpr bool operator<=(const fiber_id& other) const noexcept { return !(*this > other); }
	constexpr bool operator>=(const fiber_id& other) const noexcept { return !(*this < other); }
#endif

#if defined FIX8_FIBER_INSTRUMENTATION_
	template<typename charT, class traitsT>
	friend std::basic_ostream<charT, traitsT>& operator<<(std::basic_ostream<charT, traitsT>& os, const fiber_id& what)
	{
		if (what._ptr)
			return os << std::dec << reinterpret_cast<uint64_t>(what._ptr) % 10000;
		return os << "NaF";
	}

	std::string to_string() noexcept
	{
		std::ostringstream ostr;
		ostr << *this;
		return std::move(ostr.str());
	}
#endif

	constexpr explicit operator bool() const noexcept { return _ptr != nullptr; }
	constexpr bool operator!() const noexcept { return _ptr == nullptr; }
};

//-----------------------------------------------------------------------------------------
enum class global_fiber_flags { retain, fairshare, showdetached, count };

//-----------------------------------------------------------------------------------------
class f8_this_fiber : protected f8_nonconstructible
{
public:
	static fiber_id get_id() noexcept;
#if defined FIX8_FIBER_INSTRUMENTATION_
	static fiber_id get_prev_id() noexcept;
#endif
	static fiber_id get_pid() noexcept;
	static const char *name(const char *what=nullptr) noexcept;
	static void yield() noexcept;
	static void resume_main() noexcept;
	template<typename Clock, typename Duration>
	static void sleep_until(const std::chrono::time_point<Clock, Duration>& sltime);
	template<typename Rep, typename Period>
	static void sleep_for(const std::chrono::duration<Rep, Period>& retime);
};

class f8_fibers : protected f8_nonconstructible
{
public:
	static int size() noexcept;
	static bool has_fibers() noexcept;
	static void set_flag(global_fiber_flags flag) noexcept;
	static void reset_flag(global_fiber_flags flag) noexcept;
	static void sort() noexcept;
#if defined FIX8_FIBER_INSTRUMENTATION_
	static void print(std::ostream& os) noexcept;
#endif
	static int kill_all() noexcept;
};

//-----------------------------------------------------------------------------------------
class fiber_error : public std::system_error // from boost::fiber
{
public:
	explicit fiber_error(std::error_code ec) : std::system_error{ec} {}
	fiber_error(std::error_code ec, const char *what_arg) : std::system_error{ec, what_arg} {}
	fiber_error(std::error_code ec, const std::string& what_arg) : std::system_error{ec, what_arg} {}
};

template<typename T>
struct is_launch_policy : public std::false_type {}; // from boost::fiber

enum class launch { dispatch, post, none }; // from boost::fiber

template<>
struct is_launch_policy<launch> : public std::true_type {}; // from boost::fiber

template<typename T>
inline constexpr bool is_launch_policy_v = is_launch_policy<T>::value; // C++14 enhancement

//-----------------------------------------------------------------------------------------
/// ABC stack
class alignas(16) f8_stack
{
protected:
	char *_ptr{};
	std::size_t _size{SIGSTKSZ};

public:
	f8_stack() = default;
	virtual ~f8_stack() { deallocate(); }
	f8_stack(f8_stack&&) = default;

	f8_stack(f8_stack&) = delete;
	f8_stack& operator=(f8_stack&) = delete;

	virtual char *allocate(std::size_t size) = 0;
	virtual void deallocate() { _ptr = nullptr; }
	std::size_t size() const noexcept { return _size; }

#if defined FIX8_FIBER_INSTRUMENTATION_
	friend std::ostream& operator<<(std::ostream& os, const f8_stack& what)
	{
		return os << reinterpret_cast<void *>(what._ptr) << ' ' << what._size;
	}
#endif
};

using f8_stack_ptr = std::unique_ptr<f8_stack>;

//-----------------------------------------------------------------------------------------
/// Anonymous memory mapped stack
class f8_fixedsize_mapped_stack final : public f8_stack
{
public:
	char *allocate(std::size_t size) override
	{
		if (!_ptr)
		{
			const auto PageSize { static_cast<size_t>(sysconf(_SC_PAGESIZE)) };
			const std::size_t pages { (size + PageSize - 1) / PageSize }; // calculate pages required
			_size = (pages + 1) * PageSize; // add a page at bottom for guard-page

			if (void *vp { ::mmap(0, _size, PROT_READ | PROT_WRITE, MAP_PRIVATE |
#if defined(USE_MAP_STACK)
				MAP_ANON | MAP_STACK,
#elif defined(MAP_ANON)
				MAP_ANON,
#else
				MAP_ANONYMOUS,
#endif
				-1, 0) }; vp == MAP_FAILED)
					throw std::bad_alloc();
			else
				_ptr = static_cast<char *>(vp);
		}
		return _ptr;
	}

	void deallocate() noexcept override
	{
		if (_ptr)
			::munmap(_ptr, _size);
		f8_stack::deallocate();
	}
};

//-----------------------------------------------------------------------------------------
/// Simple heap based stack
class f8_fixedsize_heap_stack final : public f8_stack
{
public:
	char *allocate(std::size_t size) override
	{
		if (!_ptr)
		{
			_size = size & ~0xff;
			_ptr = static_cast<char *>(::operator new(_size));
		}
		return _ptr;
	}
	void deallocate() noexcept override
	{
		delete _ptr;
		f8_stack::deallocate();
	}
};

//-----------------------------------------------------------------------------------------
/// Placement stack
class f8_fixedsize_placement_stack final : public f8_stack
{
public:
	constexpr f8_fixedsize_placement_stack(char *top, size_t offs=0) noexcept { _ptr = top + offs; }
	char *allocate(std::size_t size) noexcept override
	{
		_size = size;
		return _ptr;
	}
};

//-----------------------------------------------------------------------------------------
enum class stack_type { heap, mapped, placement };

template<stack_type type, typename... Args>
constexpr f8_stack_ptr make_stack(Args&&... args)
{
	if constexpr (type == stack_type::heap)
		return f8_stack_ptr(new f8_fixedsize_heap_stack(std::forward<Args>(args)...));
	if constexpr (type == stack_type::mapped)
		return f8_stack_ptr(new f8_fixedsize_mapped_stack(std::forward<Args>(args)...));
	if constexpr (type == stack_type::placement)
		return f8_stack_ptr(new f8_fixedsize_placement_stack(std::forward<Args>(args)...));
}

//-----------------------------------------------------------------------------------------
struct alignas(16) fiber_params final
{
	int launch_order{99};
	const char name[FIBERNAMELEN]{};
	bool join{};
	// these next values can't be modified once the fiber has been created
	const size_t stacksz{SIGSTKSZ};
	const launch policy{launch::post};
	f8_stack_ptr stack{make_stack<stack_type::heap>()};
};

//-----------------------------------------------------------------------------------------
class alignas(16) fiber_base
{
	uintptr_t *_stk; // top of fiber stack
	const uintptr_t _stacksz;
	uintptr_t *const _stk_alloc{}; // allocated stack memory
	fiber_params _params;
	const fiber_id _pfid; // parent fiber
#if defined FIX8_FIBER_INSTRUMENTATION_
	fiber_id _prev_fiber;
	unsigned _ctxswtchs{};
	std::chrono::nanoseconds _extime{}, _exdelta{};
#endif
	enum fiber_flags { main, finished, suspended, dispatched, detached, notstarted, joinonexit, fiber_flags_count }; // mfspdnj
	std::bitset<fiber_flags_count> _flags;
	std::chrono::steady_clock::time_point _tp{};
	std::condition_variable _cv_join;
	std::mutex _join_mutex;

	template<typename Wrapper>
	static void trampoline(void *ptr) noexcept;

	// asm stack switch routine
	static void coroswitch(fiber_base *old, fiber_base *newer) noexcept asm("_coroswitch");

	static size_t get_default_stacksz()
	{
		static thread_local size_t sz([]()
		{
			size_t size{};
			if (pthread_attr_t attr; pthread_attr_init(&attr) == 0)
				pthread_attr_getstacksize(&attr, &size);
			return size;
		}());
		return sz;
	}

	template<typename Fn>
	struct callable_wrapper
	{
		typename std::decay_t<Fn> _func;
		callable_wrapper(Fn&& func) noexcept : _func(std::forward<Fn>(func)) {}
	};

	template<typename Fn>
	void setup_continuation(Fn&& func) noexcept
	{
		_stk = _stk_alloc + _stacksz / sizeof(uintptr_t) - 1; // set top of stack
		*--_stk = reinterpret_cast<uintptr_t>(trampoline<callable_wrapper<Fn>>);
		*--_stk = reinterpret_cast<uintptr_t>(new (reinterpret_cast<char*>(_stk_alloc) + sizeof(fiber_base))
			callable_wrapper(std::forward<Fn>(func))); // store at bottom of stack
		std::fill(_stk -= 7, _stk, 0x0);
	}

	fiber_base() noexcept : _stacksz{get_default_stacksz()},
		_params{.name="main",.stacksz=_stacksz,.stack=f8_stack_ptr()},
#if defined FIX8_FIBER_INSTRUMENTATION_
		_ctxswtchs{1},
#endif
		_flags{1 << fiber_flags::main} {}

public:
	template<typename Fn>
	fiber_base(fiber_params&& params, Fn&& func, uintptr_t *sp, fiber_id parent) noexcept
		: _stacksz(params.stacksz), _stk_alloc(sp), _params(std::move(params)), _pfid(parent),
			_flags{(1 << fiber_flags::notstarted) | (_params.join ? (1 << fiber_flags::joinonexit) : 0ULL)}
	{
		setup_continuation(std::forward<Fn>(func));
	}

	~fiber_base() noexcept = default;

	fiber_id get_id() const noexcept { return fiber_id(!is_main() ? this : nullptr); }
#if defined FIX8_FIBER_INSTRUMENTATION_
	constexpr fiber_id get_prev_id() const noexcept { return _prev_fiber; }
#endif
	constexpr fiber_id get_pid() const noexcept { return _pfid; }

	const char *name(const char *what=nullptr)
	{
		if (what && !is_main()) // you can't name main
		{
			const size_t len { std::strlen(what) }, adjlen { len + 1 > FIBERNAMELEN ? FIBERNAMELEN - 1 : len };
			char *ptr { const_cast<char*>(&_params.name[0]) }; // override const
			std::memcpy(ptr, what, adjlen);
			*(ptr + adjlen) = 0;
		}
		return _params.name;
	}
	int order(int ord) noexcept { return _params.launch_order = ord; }

#if defined FIX8_FIBER_INSTRUMENTATION_
	std::string get_flags_as_string() const noexcept
	{
		static constexpr const char flagstrs[]{"mfspdnj"};
		char str[_flags.size() + 1]{};
		for (int ii{}; ii < _flags.size(); ++ii)
			str[ii] = _flags.test(ii) ? flagstrs[ii] : '_';
		return str;
	}
#endif

	constexpr bool joinable() const noexcept { return !_flags[fiber_flags::finished]; };
	constexpr bool is_main() const noexcept { return _flags[fiber_flags::main]; };
	constexpr bool is_detached() const noexcept { return _flags[fiber_flags::detached]; };
	constexpr bool is_suspended() const noexcept { return _flags[fiber_flags::suspended]; };
	constexpr bool is_joinonexit() const noexcept { return _flags[fiber_flags::joinonexit]; };
	constexpr bool is_dispatched() const noexcept { return _flags[fiber_flags::dispatched]; };

#if defined FIX8_FIBER_INSTRUMENTATION_
	friend std::ostream& operator<<(std::ostream& os, const fiber_base& what);
	friend class fiber_monitor;
#endif
	friend class fiber;
	friend f8_this_fiber;
	friend f8_fibers;
};

using fiber_base_ptr = std::shared_ptr<fiber_base>;

//-----------------------------------------------------------------------------------------
// static void fiber_base::coroswitch(fiber_base *old, fiber_base *newer) noexcept;
asm(R"(.text
.align 16
.type _coroswitch,@function
_coroswitch:
	cmp %rdi,%rsi
	jne _doswitch
	ret
_doswitch:
	subq $0x40,%rsp
   stmxcsr (%rsp)
   fnstcw  4(%rsp)
	movq %r15,8(%rsp)
	movq %r14,8*2(%rsp)
	movq %r13,8*3(%rsp)
	movq %r12,8*4(%rsp)
	movq %rbx,8*5(%rsp)
	movq %rbp,8*6(%rsp)
	movq %rdi,8*7(%rsp)

	mov %rsp,(%rdi)
	mov (%rsi),%rsp

   ldmxcsr (%rsp)
   fldcw  4(%rsp)
   movq 8(%rsp),%r15
   movq 8*2(%rsp),%r14
   movq 8*3(%rsp),%r13
   movq 8*4(%rsp),%r12
   movq 8*5(%rsp),%rbx
   movq 8*6(%rsp),%rbp
   movq 8*7(%rsp),%rdi
	movq 8*8(%rsp),%r8
	addq $0x48,%rsp
   jmp *%r8
.size _coroswitch,.-_coroswitch
.section .note.GNU-stack,"",%progbits
)");

//-----------------------------------------------------------------------------------------
class alignas(16) fiber
{
	fiber_base_ptr _ctx;

#define GetVars() auto& [uni, det, sch, cur, man, trm, now, flg] { fiber::get_vars() }
#define GetVar(x) fiber::get_vars().x
#define ConstGetVars() const GetVars()
#define ConstGetVar(x) static_cast<const decltype(fiber::cvars::x)&>(fiber::get_vars().x)

public:
	struct cvars final
	{
		std::set<fiber_base_ptr> _uniq, _det;
		std::deque<fiber_base_ptr> _sched;
		fiber_base_ptr _curr;
		const fiber_base_ptr _main;
		bool _term;
		std::chrono::time_point<std::chrono::system_clock> _now;
		std::bitset<static_cast<int>(global_fiber_flags::count)> _gflags;

		cvars(const cvars&) = delete;
		cvars(cvars&&) = delete;
		cvars& operator=(const cvars&) = delete;
		cvars& operator=(cvars&&) = delete;
		~cvars() noexcept;
	};

private:
	static cvars& get_vars() noexcept
	{
		static thread_local fiber_base _main_ctx;
		static thread_local fiber_base_ptr _main_ctx_ptr { fiber_base_ptr(&_main_ctx, [](auto *pp) {}) };
		static thread_local cvars _cvars // per thread singleton
		{
			._uniq={_main_ctx_ptr},._curr=_main_ctx_ptr,._main=_main_ctx_ptr,
			._term=false,._now=std::chrono::system_clock::now()
		};
		return _cvars;
	}

	static void fiber_exit()
	{
#if defined FIX8_FIBER_INSTRUMENTATION_
		std::cerr << "fiber has exited. Terminating application." << std::endl;
#endif
		std::terminate();
	}
	static void sort_queue(std::deque<fiber_base_ptr>& sch) noexcept
	{
		std::sort(sch.begin(), sch.end(), [](const fiber_base_ptr& p1, const fiber_base_ptr& p2)
		{
			return p1->_params.launch_order < p2->_params.launch_order;
		});
	}

public:
	template<typename Fn, typename... Args, std::enable_if_t<!std::is_bind_expression_v<Fn>,int> = 0>
	fiber(Fn&& func, Args&&... args)
		: fiber({}, std::bind(std::forward<Fn>(func), std::forward<Args>(args)...)) {}

	template<typename Fn, typename... Args, std::enable_if_t<!std::is_bind_expression_v<Fn>,int> = 0>
	fiber(fiber_params&& params, Fn&& func, Args&&... args)
		: fiber(std::move(params), std::bind(std::forward<Fn>(func), std::forward<Args>(args)...)) {}

	template<typename Fn>
	fiber(Fn&& func) : fiber({}, std::forward<Fn>(func)) {}

	template<typename Fn>
	fiber(fiber_params&& params, Fn&& func)
	{
		uintptr_t *sp { reinterpret_cast<uintptr_t *>(params.stack->allocate(params.stacksz)) };
		GetVars();
		_ctx.reset(new (reinterpret_cast<char*>(sp))
			fiber_base(std::move(params), std::forward<Fn>(func), sp, cur->get_id()), [](auto *pp) {});
		uni.insert(_ctx);
		sch.push_back(_ctx);
		sort_queue(sch);
		if (_ctx->_params.policy == launch::dispatch)
		{
			_ctx->_flags.set(fiber_base::fiber_flags::dispatched);
			resume();
		}
	}

	fiber(const fiber&) = delete;
	fiber& operator=(const fiber&) = delete;

	~fiber()
	{
		if (joinable() && !is_detached())
		{
			if (is_joinonexit())
				join();
			else
				fiber_exit();
		}
	}

	fiber(fiber_base_ptr from) noexcept : _ctx(std::move(from)) {}
	fiber(fiber&& other) noexcept
	{
		_ctx.swap(other._ctx);
	}
	fiber& operator=(fiber&& other) noexcept
	{
		if (joinable())
			fiber_exit();
		if (_ctx != other._ctx)
			_ctx.swap(other._ctx);
		return *this;
	}

	fiber& set_joinonexit(bool set=true) noexcept
	{
		(_ctx->_params.join = set) ? _ctx->_flags.set(fiber_base::fiber_flags::joinonexit)
											: _ctx->_flags.reset(fiber_base::fiber_flags::joinonexit);
		return *this;
	}

	fiber& set_params(const char *nm, int lo=99, bool jn=false) noexcept
	{
		name(nm);
		order(lo);
		set_joinonexit(jn);
		return *this;
	}
	fiber& set_params(const std::string& nm, int lo=99, bool jn=false) noexcept
	{
		return set_params(nm.c_str(), lo, jn);
	}

	void join()
	{
		if (auto& cur { GetVar(_curr) }; _ctx != cur)
		{
			if (!joinable())
				throw fiber_error { std::make_error_code(std::errc::invalid_argument),
					"fiber not joinable" };
			else
			{
				std::unique_lock jlock(_ctx->_join_mutex);
				_ctx->_cv_join.wait(jlock, [this]
				{
					f8_this_fiber::yield();
					return !joinable();
				});
			}
		}
		else
			throw fiber_error { std::make_error_code(std::errc::resource_deadlock_would_occur),
				"fiber cannot self-join" };
	}
	void join_if()
	{
		if (joinable())
			join();
	}

	void detach()
	{
		if (is_detached())
			throw fiber_error { std::make_error_code(std::errc::invalid_argument),
				"fiber already detached" };
		else if (!joinable() && !is_dispatched())
			throw fiber_error { std::make_error_code(std::errc::invalid_argument),
				"fiber not joinable" };
		else
		{
			_ctx->_flags.set(fiber_base::fiber_flags::detached);
			GetVars();
			det.insert(_ctx);
			std::deque<fiber_base_ptr> csched;
			sch.swap(csched);
			for (auto& pp : csched)
				if (pp != _ctx) // remove from scheduler
					sch.push_back(_ctx);
		}
	}

	void suspend()
	{
		if (!joinable())
			throw fiber_error { std::make_error_code(std::errc::invalid_argument),
				"fiber not joinable" };
		else if (is_detached())
			throw fiber_error { std::make_error_code(std::errc::invalid_argument),
				"cannot suspend detached fiber" };
		else if (is_suspended())
			throw fiber_error { std::make_error_code(std::errc::invalid_argument),
				"fiber already suspended" };
		_ctx->_tp = decltype(_ctx->_tp)();
		_ctx->_flags.set(fiber_base::fiber_flags::suspended);
	}
	void unsuspend()
	{
		if (!joinable())
			throw fiber_error { std::make_error_code(std::errc::invalid_argument),
				"fiber not joinable" };
		else if (is_detached())
			throw fiber_error { std::make_error_code(std::errc::invalid_argument),
				"cannot unsuspend detached fiber" };
		else if (!is_suspended())
			throw fiber_error { std::make_error_code(std::errc::invalid_argument),
				"fiber not suspended" };
		_ctx->_tp = decltype(_ctx->_tp)();
		_ctx->_flags.reset(fiber_base::fiber_flags::suspended);
	}
	void kill()
	{
		if (!joinable())
			throw fiber_error { std::make_error_code(std::errc::invalid_argument),
				"fiber not joinable" };
		else if (is_detached())
			throw fiber_error { std::make_error_code(std::errc::invalid_argument),
				"cannot kill detached fiber" };
		_ctx->_flags.set(fiber_base::fiber_flags::finished); // will not be scheduled again
	}

	void resume()
	{
		if (!joinable())
			throw fiber_error { std::make_error_code(std::errc::invalid_argument),
				"fiber not joinable" };
		else if (is_detached())
			throw fiber_error { std::make_error_code(std::errc::invalid_argument),
				"cannot resume detached fiber" };
		GetVars();
		if (cur == _ctx)
			throw fiber_error { std::make_error_code(std::errc::resource_deadlock_would_occur),
				"fiber cannot self-join" };
		else if (uni.count(_ctx))
		{
			if (auto& front { sch.front() }; front != _ctx)
			{
				for (auto itr { sch.begin() }; itr != sch.end(); ++itr)
				{
					if (*itr == _ctx)
					{
						itr->swap(front); // swap next with specified fiber
						break;
					}
				}
			}
			f8_this_fiber::yield();
		}
	}
	void resume_if()
	{
		if (joinable() && !is_detached())
			resume();
	}
	template<typename Fn, typename... Args, std::enable_if_t<!std::is_bind_expression_v<Fn>,int> = 0>
	void resume_with(Fn&& func, Args&&... args)
		{ resume_with(std::bind(std::forward<Fn>(func), std::forward<Args>(args)...)); }

	template<typename Fn>
	void resume_with(Fn&& func)
	{
		_ctx->setup_continuation(std::forward<Fn>(func));
		resume();
	}

	void swap(fiber& other) noexcept
	{
		if (_ctx != other._ctx)
			_ctx.swap(other._ctx);
	}
	static void sort() noexcept
	{
		sort_queue(GetVar(_sched));
	}

#if defined FIX8_FIBER_INSTRUMENTATION_
	static const cvars& const_get_vars() noexcept { return get_vars(); }
#endif

	bool joinable() const noexcept { return _ctx->joinable(); }
	bool is_main() const noexcept { return _ctx->is_main(); }
	bool is_detached() const noexcept { return _ctx->is_detached(); }
	bool is_suspended() const noexcept { return _ctx->is_suspended(); };
	bool is_joinonexit() const noexcept { return _ctx->is_joinonexit(); }
	bool is_dispatched() const noexcept { return _ctx->is_dispatched(); }
	explicit operator bool() const noexcept { return joinable(); }
	bool operator! () const noexcept { return !joinable(); }

	const char *name(const char *what=nullptr) noexcept { return _ctx->name(what); }
	int order(int ord=99) noexcept { return ord == 99 ? _ctx->_params.launch_order : _ctx->_params.launch_order = ord; }
	fiber_id get_id() const noexcept { return _ctx->get_id(); }
	fiber_id get_pid() const noexcept { return _ctx->get_pid(); }

#if defined FIX8_FIBER_INSTRUMENTATION_
	fiber_id get_prev_id() const noexcept { return _ctx->get_prev_id(); }
	friend std::ostream& operator<<(std::ostream& os, const fiber_base& what);
	friend std::ostream& operator<<(std::ostream& os, const fiber& what) { return os << *what._ctx; }
#endif
	friend f8_this_fiber;
	friend f8_fibers;
	friend fiber_base;
};

inline void swap(fiber& first, fiber& second) noexcept
{
	first.swap(second);
}

inline bool operator<(const fiber& left, const fiber& right) noexcept
{
	return left.get_id() < right.get_id();
}

//-----------------------------------------------------------------------------------------
template<typename Wrapper>
void fiber_base::trampoline(void *ptr) noexcept
{
	static_cast<Wrapper*>(ptr)->_func();
	GetVars();
	cur->_flags.set(fiber_base::fiber_flags::finished);
	if (!sch.empty())
		f8_this_fiber::yield();
	if (!det.empty()) // pickup temporarily detached main
	{
		auto dt { det.begin() };
		det.erase(dt);
		fiber_base::coroswitch(cur.get(), dt->get());
	}
	fiber::fiber_exit();
}

//-----------------------------------------------------------------------------------------
// Activate per thread pending/suspended fibers at thread exit
fiber::cvars::~cvars() noexcept
{
	if (!_det.empty())
	{
		for (auto& pp : _det) // place detached back on scheduler
			_sched.emplace_back(pp);
		_det.clear();
		sort_queue(_sched);
	}
	_term = true;
	if (!_sched.empty())
	{
		for (auto& pp : _sched)
			if (pp->is_suspended()) // unsuspend any suspended fiber
				pp->_flags.reset(fiber_base::fiber_flags::suspended);
		f8_this_fiber::yield();
	}
}

//-----------------------------------------------------------------------------------------
// custom async, uses fiber, modified boost::fiber::async
// uses std::invoke_result (std::result_of is deprecated)
// policy must be launch::dispatch
template<typename Fn, typename... Args>
std::future<typename std::invoke_result_t<typename std::decay_t<Fn>,typename std::decay_t<Args>...>>
async(Fn&& fn, Args... args)
{
	using result_type = typename std::invoke_result_t<typename std::decay_t<Fn>,typename std::decay_t<Args>...>;
	std::packaged_task<result_type(typename std::decay_t<Args>...)> task { std::forward<Fn>(fn) };
	std::future<result_type> fut { task.get_future() };
	fiber({.policy=launch::dispatch}, std::move(task), std::forward<Args>(args)...).detach();
	return fut;
}

template<typename Fn, typename... Args>
std::future<typename std::invoke_result_t<typename std::decay_t<Fn>,typename std::decay_t<Args>...>>
async(fiber_params&& params, Fn&& fn, Args... args)
{
	using result_type = typename std::invoke_result_t<typename std::decay_t<Fn>,typename std::decay_t<Args>...>;
	std::packaged_task<result_type(typename std::decay_t<Args>...)> task { std::forward<Fn>(fn) };
	std::future<result_type> fut { task.get_future() };
	fiber({.launch_order=params.launch_order,.name=std::move(params.name),.join=params.join,
		.stacksz=params.stacksz,.policy=launch::dispatch,.stack=std::move(params.stack)},
		std::move(task), std::forward<Args>(args)...).detach();
	return fut;
}

//-----------------------------------------------------------------------------------------
#if defined FIX8_FIBER_INSTRUMENTATION_
std::ostream& operator<<(std::ostream& os, const fiber_base& what)
{
	os << (&what == ConstGetVar(_curr).get() ? '*' : ' ')
		<< ' ' << std::left << std::setw(4) << what.get_id()
		<< ' ' << std::left << std::setw(4) << what.get_pid()
		<< ' ' << std::left << std::setw(4) << what.get_prev_id()
		<< ' ' << std::right << std::setw(6) << what._ctxswtchs
		<< ' ' << std::right << std::setw(14) << what._stk
		<< ' ' << std::right << std::setw(14) << what._stk_alloc
		<< ' ' << std::right << std::setw(7) <<
			(what._stk_alloc ? (reinterpret_cast<unsigned long>(what._stk_alloc + what._stacksz
									 / sizeof(uintptr_t) - 1) - reinterpret_cast<unsigned long>(what._stk)) : 0)
		<< ' ' << std::right << std::setw(8) << what._stacksz
		<< ' ' << what.get_flags_as_string() << std::setw(4) << std::dec << what._params.launch_order
		<< ' ' << what._params.name; //  << " (" << reinterpret_cast<const void*>(what.name) << ')';
	return os;
}
#endif

//-----------------------------------------------------------------------------------------
fiber_id f8_this_fiber::get_id() noexcept { return ConstGetVar(_curr)->get_id(); }
#if defined FIX8_FIBER_INSTRUMENTATION_
fiber_id f8_this_fiber::get_prev_id() noexcept { return ConstGetVar(_curr)->get_prev_id(); }
#endif
fiber_id f8_this_fiber::get_pid() noexcept { return ConstGetVar(_curr)->get_pid(); }

void f8_this_fiber::yield() noexcept
{
	GetVars();
	while (!sch.empty())
	{
		auto front { sch.front() };
		sch.pop_front();
		if (front->joinable() && uni.count(front))
		{
			if (front->is_suspended())
			{
				if (auto tse { front->_tp.time_since_epoch() };
					front->_tp.time_since_epoch() != decltype(tse)::zero() && front->_tp < std::chrono::steady_clock::now())
				{
					front->_flags.reset(fiber_base::fiber_flags::suspended);
					front->_tp = decltype(front->_tp)();
				}
				else
				{
					sch.push_back(front);
					continue;
				}
			}
			else if (trm && front->is_main())
			{
				det.emplace(front); // temporarily detach main
				continue;
			}

#if defined FIX8_FIBER_INSTRUMENTATION_
			auto snold { std::exchange(now, std::chrono::system_clock::now()) };
			cur->_extime += (cur->_exdelta = now - snold);
#endif
			front.swap(cur);
#if defined FIX8_FIBER_INSTRUMENTATION_
			cur->_prev_fiber = front->get_id();
			++cur->_ctxswtchs;
#endif

			if (cur->_flags[fiber_base::fiber_flags::notstarted])
				cur->_flags.reset(fiber_base::fiber_flags::notstarted);
			sch.push_back(front);
			fiber_base::coroswitch(front.get(), cur.get());
			break;
		}
		else if (!flg[static_cast<int>(global_fiber_flags::retain)])
			uni.erase(front);
	}
}
void f8_this_fiber::resume_main() noexcept
{
	fiber(GetVar(_main)).resume();
}

template<typename Clock, typename Duration>
void f8_this_fiber::sleep_until(const std::chrono::time_point<Clock, Duration>& sltime)
{
	sleep_for(sltime - Clock::now());
}
template<typename Rep, typename Period>
void f8_this_fiber::sleep_for(const std::chrono::duration<Rep, Period>& retime)
{
	if (auto when { std::chrono::steady_clock::now() + retime }; when > std::chrono::steady_clock::now())
	{
		auto& cur { GetVar(_curr) };
		cur->_tp = when;
		cur->_flags.set(fiber_base::fiber_flags::suspended);
		yield();
	}
}
const char *f8_this_fiber::name(const char *what) noexcept { return GetVar(_curr)->name(what); }

//-----------------------------------------------------------------------------------------
int f8_fibers::size() noexcept { return ConstGetVar(_sched).size(); }
bool f8_fibers::has_fibers() noexcept { return size(); }
#if defined FIX8_FIBER_INSTRUMENTATION_
void f8_fibers::print(std::ostream& os) noexcept
{
	os << "#      fid  pfid prev   ctxs      stack ptr    stack alloc   depth  stacksz   flags ord name\n";
	int pos{};
	ConstGetVars();
	os << std::left << std::setw(5) << std::dec << pos++ << *cur << std::endl;
	for (const auto& pp : sch) // scheduled
		os << std::left << std::setw(5) << std::dec << pos++ << *pp << std::endl;
	if (flg[static_cast<int>(global_fiber_flags::showdetached)])
	{
		pos = 0;
		for (const auto& pp : det) // detached (shown with -ve #)
			os << std::left << std::setw(5) << std::dec << --pos << *pp << std::endl;
	}
}
#endif
void f8_fibers::sort() noexcept { fiber::sort(); }
int f8_fibers::kill_all() noexcept
{
	GetVars();
	int killed{};
	for (auto& pp : sch)
	{
		if (pp->joinable() && !pp->is_detached() && !pp->is_main())
		{
			pp->_flags.set(fiber_base::fiber_flags::finished); // will not be scheduled again
			++killed;
		}
	}
	return killed;
}
void f8_fibers::set_flag(global_fiber_flags flag) noexcept { GetVar(_gflags).set(static_cast<int>(flag)); }
void f8_fibers::reset_flag(global_fiber_flags flag) noexcept { GetVar(_gflags).reset(static_cast<int>(flag)); }

//-----------------------------------------------------------------------------------------
template<typename Fn, typename... Fns>
constexpr void launch_all(Fn&& func, Fns&& ...funcs)
{
	fiber(std::forward<Fn>(func)).detach();
	if constexpr(sizeof...(Fns))
		launch_all(std::forward<Fns>(funcs)...);
}

template<typename Ps, typename Fn, typename... Fns>
constexpr void launch_all_with_params(Ps&& params, Fn&& func, Fns&& ...funcs)
{
	fiber(std::forward<Ps>(params), std::forward<Fn>(func)).detach();
	if constexpr(sizeof...(Fns))
		launch_all_with_params(std::forward<Fns>(funcs)...);
}

//-----------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------
namespace this_fiber
{
	inline fiber_id get_id() noexcept { return f8_this_fiber::get_id(); }
#if defined FIX8_FIBER_INSTRUMENTATION_
	inline fiber_id get_prev_id() noexcept { return f8_this_fiber::get_prev_id(); }
#endif
	inline fiber_id get_pid() noexcept { return f8_this_fiber::get_pid(); }
	inline void yield() noexcept { return f8_this_fiber::yield(); }
	inline void resume_main() noexcept { return f8_this_fiber::resume_main(); }
	inline const char *name(const char *what=nullptr) noexcept { return f8_this_fiber::name(what); }

	template<typename Clock, typename Duration>
	inline void sleep_until(const std::chrono::time_point<Clock, Duration>& sltime)
		{ return f8_this_fiber::sleep_until(sltime); }

	template<typename Rep, typename Period>
	inline void sleep_for(const std::chrono::duration<Rep, Period>& retime)
		{ return f8_this_fiber::sleep_for(retime); }
}

namespace fibers
{
	inline int size() noexcept { return f8_fibers::size(); }
	inline bool has_fibers() noexcept { return f8_fibers::size() != 0; }
	inline void set_flag(global_fiber_flags flag) noexcept { f8_fibers::set_flag(flag); }
	inline void reset_flag(global_fiber_flags flag) noexcept { f8_fibers::reset_flag(flag); }
#if defined FIX8_FIBER_INSTRUMENTATION_
	inline void print(std::ostream& os=std::cout) noexcept { f8_fibers::print(os); }
	inline const fiber::cvars& const_get_vars() noexcept { return fiber::const_get_vars(); }
#endif
	inline void sort() noexcept { f8_fibers::sort(); };
	inline int kill_all() noexcept { return f8_fibers::kill_all(); }
};

} // namespace FIX8

#endif // FIX8_FIBER_HPP_
